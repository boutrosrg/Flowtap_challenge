#   axis$children[[2]] contains the tick marks and tick mark labels.
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
# Tick mark lengths can change.
# A function to get the original tick mark length
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r, pp$b, pp$r , clip = "off", name = "axis-r")
# Labels grob
left = textGrob(expression("Rainevent" ~ Delta ~ theta) , x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 12, col =  "#00a4e6"))
right =  textGrob("B1", x = .98, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 12, col =  "red"))
labs = gTree("Labs", children = gList(left, right))
# New row in the gtable for labels
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
# Put the label in the new row
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
# Turn off clipping in the plot panel
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
grid.draw(g1)
rm(list= ls())                            # remove all previous objects (clear R session)
var([26, 27, 28, 164])
var(26, 27, 28, 164)
var[26, 27, 28, 164]
var(c(26, 27, 28, 164))
var(c(26, 27, 28, 164))/4
var(c(26, 27, 28, 164))/4
var(c(12, 19, 25, 46, 74, 116, 163))/7
var(c(26, 27, 28, 164))
var(c(12, 19, 25, 46, 74, 116, 163))
sqrt(var(c(26, 27, 28, 164)))
sqrt(var(c(12, 19, 25, 46, 74, 116, 163)))
class(AirPassengers)
str(AirPassengers)
head(AirPassengers)
start(AirPassengers)
end(AirPassengers)
View(AirPassengers)
Summary(AirPassengers)
plot(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
acf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
acf(diff(log(AirPassengers)))
# set working directory
setwd("/home/boutros/Data/Jobs/flowtap/")
# read data file
data<- read.csv(file="adult.data", header=TRUE, sep=",")
# divide data into continuous & categorical features
d_con = data[,c("age","fnlwgt", "EducationNum", "CapitalGain", "CapitalLoss", "HoursPerWeek")]
d_cat = data[,c("workclass", "education", "MaritalStatus", "occupation", "relationship", "race", "sex", "NativeCountry", "income")]
# convert categorical data to type 'character'
d_cat = data.frame(lapply(d_cat, as.character), stringsAsFactors=FALSE)
# # scale continuous data between 0 & 1
# for(i in names(d_con)){
#   d_con[[i]] = sapply(d_con[[i]], function(x) (x-min(d_con[[i]]))/(max(d_con[[i]])-min(d_con[[i]])))
# }
# write.csv(d_con, file = "d_con_scaled.csv", row.names=FALSE, sep = ",")
# read scaled continuous data from scv file
d_con_scaled = read.csv(file="d_con_scaled.csv", header=TRUE, sep=",")
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable)
library(ggplot2)
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable)
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
library(reshape2)
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
d_con_scaled$income = d_cat$income
library(ggplot2)
library(reshape2)
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
str(d_con_scaled)
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
ggsave("hist.png")
ggplot(data = melt(d_con), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
ggsave("hist2.png")
var(d_con)
var(d_con$age)
var(d_con$fnlwgt)
var(d_con$EducationNum)
length(unique(d_con$EducationNum))
length(unique(d_cat$education))
summary(d_con$EducationNum)
var(d_con$EducationNum)
table(d_cat$workclass)
ggplot(data = melt(d_cat), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
ggplot(data = melt(d_con), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
ggplot(data = melt(d_con), mapping = aes(x = value)) +
geom_histogram(bins = 20) + facet_wrap(~variable, scales = 'free_x')
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 20) + facet_wrap(~variable, scales = 'free_x')
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 15) + facet_wrap(~variable, scales = 'free_x')
ggsave("hist2.png")
table(d_cat$education)
table(d_con$EducationNum)
table(d_con$CapitalGain)
table(d_con$CapitalLoss)
table(d_con$HoursPerWeek)
summary(d_con$HoursPerWeek)
# categorical data count
ggplot(data = d_cat, aes(x = colnames(d_cat), y = Count, fill = colour)) + geom_bar(stat="identity")
ggplot(data = d_cat, aes(x = colnames(d_cat), fill = colour)) + geom_bar(stat="identity")
ggplot(data = d_cat, aes(x = colnames(d_cat), fill = color)) + geom_bar(stat="identity")
ggplot(data = d_cat, aes(x = colnames(d_cat))) + geom_bar(stat="identity")
ggplot(data = d_cat, aes(x = workclass)) + geom_bar(stat="identity")
ggplot(d_cat, aes(x = workclass)) + geom_bar(stat="identity")
ggplot(d_cat, aes(x = workclass)) + geom_bar()
ggplot(data = d_cat, aes(x = workclass)) + geom_bar()
ggplot(data = d_cat, mapping = aes(x = workclass)) + geom_bar()
ggplot(data = d_cat, mapping = aes(x = value)) + geom_bar() + facet_wrap(~variable, scales = 'free_x')
ggplot(data = d_cat, mapping = aes(x = value)) + geom_bar()
melt(d_con_scaled)
melt(d_cat)
ggplot(data = melt(d_cat), mapping = aes(x = value)) + geom_bar() + facet_wrap(~variable, scales = 'free_x')
colnames(d_cat )
ggplot(data = d_cat, mapping = aes(x = c(workclass, education))) + geom_bar()# + facet_wrap(~variable, scales = 'free_x')
ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar()# + facet_wrap(~variable, scales = 'free_x')
ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
unique(d_cat$education)
table(d_cat$education)
colnames(d_cat )
p1 = ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2 = ggplot(data = d_cat, mapping = aes(x = MaritalStatus )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p3 = ggplot(data = d_cat, mapping = aes(x = occupation )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p4 = ggplot(data = d_cat, mapping = aes(x = relationship )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5 = ggplot(data = d_cat, mapping = aes(x = race )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6 = ggplot(data = d_cat, mapping = aes(x = sex )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p7 = ggplot(data = d_cat, mapping = aes(x = NativeCountry )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p8 = ggplot(data = d_cat, mapping = aes(x = income )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, p3, p4, p5, p6, p7, p8, cols=2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p1 = ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2 = ggplot(data = d_cat, mapping = aes(x = MaritalStatus )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p3 = ggplot(data = d_cat, mapping = aes(x = occupation )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p4 = ggplot(data = d_cat, mapping = aes(x = relationship )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5 = ggplot(data = d_cat, mapping = aes(x = race )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6 = ggplot(data = d_cat, mapping = aes(x = sex )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p7 = ggplot(data = d_cat, mapping = aes(x = NativeCountry )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p8 = ggplot(data = d_cat, mapping = aes(x = income )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, p3, p4, p5, p6, p7, p8, cols=2)
ggsave("hist3.png")
table(d_cat$MaritalStatus)
14976 /nrow(d_cat)
ggsave("hist3.png")
10683 /nrow(d_cat)
table(d_cat$relationship)
table(d_cat$occupation)
4099 + 4066 + 4140 /nrow(d_cat)
(4099 + 4066 + 4140) /nrow(d_cat)
melted_cormat <- melt(d_con, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
get_upper_tri(d_con)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
upper_tri <- get_upper_tri(d_con)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
melted_cormat <- melt(upper_tri, na.rm = TRUE)
str(d_con)
str(d_con_scaled)
upper_tri <- get_upper_tri(d_con_scaled)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
str(melted_cormat)
upper_tri
View(upper_tri)
cormat <- round(cor(d_con_scaled),2)
cormat <- round(cor(d_con),2)
upper_tri <- get_upper_tri(cormat)
View(upper_tri)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
View(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggsave("map1.png")
colnames(d_con_scaled)
str(d_con_scaled)
table(d_con_scaled$income)
# read scaled continuous data from scv file
d_con_scaled = read.csv(file="d_con_scaled.csv", header=TRUE, sep=",")
# add 'income' feature to scaled continuous data
d_con_scaled$income_chr = d_cat$income
colnames(d_con_scaled)
d_con_scaled$income = 0
d_con_scaled = within(d_con_scaled, income[income_chr == '>50K'] <- 1)
head(d_con_scaled)
tail(d_con_scaled)
d_con_scaled = within(d_con_scaled, income[income == 0 & income_chr == '>50K'] <- 1)
tail(d_con_scaled)
table(d_con_scaled$income)
table(d_con_scaled$income_chr)
unique(d_con_scaled$income_chr)
d_con_scaled = within(d_con_scaled, income[income_chr == ' >50K'] <- 1)
tail(d_con_scaled)
table(d_con_scaled$income_chr)
table(d_con_scaled$income)
str(d_con)
d_con_scaled =  d_con_scaled[ , -which(names(d_con_scaled) %in% c("income_chr"))]
str(d_con_scaled)
cormat <- round(cor(d_con_scaled),2)
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
cormat <- round(cor(d_con_scaled),2)
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggsave("map1.png")
table(d_cat$income)
univariateAnalysis<- function(d_con_scaled, d_cat){
## Univariate Analysis
# continuous data histogram
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 15) + facet_wrap(~variable, scales = 'free_x')
ggsave("hist2.png")
# categorical data count
p1 = ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2 = ggplot(data = d_cat, mapping = aes(x = MaritalStatus )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p3 = ggplot(data = d_cat, mapping = aes(x = occupation )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p4 = ggplot(data = d_cat, mapping = aes(x = relationship )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5 = ggplot(data = d_cat, mapping = aes(x = race )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6 = ggplot(data = d_cat, mapping = aes(x = sex )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p7 = ggplot(data = d_cat, mapping = aes(x = NativeCountry )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p8 = ggplot(data = d_cat, mapping = aes(x = income )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, p3, p4, p5, p6, p7, p8, cols=2)
ggsave("hist3.png")
}
univariateAnalysis(d_con_scaled, d_cat)
# set working directory
setwd("/home/boutros/Data/Jobs/flowtap/")
# read data file
data<- read.csv(file="adult.data", header=TRUE, sep=",")
# divide data into continuous & categorical features
d_con = data[,c("age","fnlwgt", "EducationNum", "CapitalGain", "CapitalLoss", "HoursPerWeek")]
d_cat = data[,c("workclass", "education", "MaritalStatus", "occupation", "relationship", "race", "sex", "NativeCountry", "income")]
# convert categorical data to type 'character'
d_cat = data.frame(lapply(d_cat, as.character), stringsAsFactors=FALSE)
# # scale continuous data between 0 & 1
# for(i in names(d_con)){
#   d_con[[i]] = sapply(d_con[[i]], function(x) (x-min(d_con[[i]]))/(max(d_con[[i]])-min(d_con[[i]])))
# }
# write.csv(d_con, file = "d_con_scaled.csv", row.names=FALSE, sep = ",")
# read scaled continuous data from scv file
d_con_scaled = read.csv(file="d_con_scaled.csv", header=TRUE, sep=",")
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
univariateAnalysis<- function(d_con_scaled, d_cat){
## visualization
library(ggplot2)
library(reshape2)
## Univariate Analysis
# continuous data histogram
ggplot(data = melt(d_con_scaled), mapping = aes(x = value)) +
geom_histogram(bins = 15) + facet_wrap(~variable, scales = 'free_x')
ggsave("hist2.png")
# categorical data count
p1 = ggplot(data = d_cat, mapping = aes(x = education )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2 = ggplot(data = d_cat, mapping = aes(x = MaritalStatus )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p3 = ggplot(data = d_cat, mapping = aes(x = occupation )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p4 = ggplot(data = d_cat, mapping = aes(x = relationship )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5 = ggplot(data = d_cat, mapping = aes(x = race )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6 = ggplot(data = d_cat, mapping = aes(x = sex )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p7 = ggplot(data = d_cat, mapping = aes(x = NativeCountry )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p8 = ggplot(data = d_cat, mapping = aes(x = income )) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, p3, p4, p5, p6, p7, p8, cols=2)
ggsave("hist3.png")
}
bivariateAnalysis<- function(d_con_scaled, d_cat){
## visualization
library(ggplot2)
library(reshape2)
## Bi-ivariate Analysis
# add 'income' feature to scaled continuous data
d_con_scaled$income_chr = d_cat$income
# set income variable to d_con_scaled ad numerical variable
d_con_scaled$income = 0
d_con_scaled = within(d_con_scaled, income[income_chr == ' >50K'] <- 1)
d_con_scaled =  d_con_scaled[ , -which(names(d_con_scaled) %in% c("income_chr"))]
cormat <- round(cor(d_con_scaled),2)
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggsave("map1.png")
}
univariateAnalysis(d_con_scaled, d_cat)
bivariateAnalysis(d_con_scaled, d_cat)
